name: Create Beta Release

on:
  pull_request:
    branches:
      - master
    types:
      - closed
  workflow_dispatch: # Optional: for manual testing

jobs:
  create-release:
    if: github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.head.ref == 'dev'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract PR metadata
        id: pr_info
        run: |
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "body=${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT

      - name: Get latest beta release version
        id: get_latest
        run: |
          latest_tag=$(gh release list --limit 100 --json tagName --jq '.[] | select(.tagName | test("^v[0-9]+\\.[0-9]+\\.[0-9]+-beta$")) | .tagName' | sort -V | tail -n 1)

          if [[ -z "$latest_tag" ]]; then
            major=1
            minor=0
            patch=0
          else
            version=$(echo "$latest_tag" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)-beta$/\1 \2 \3/')
            read major minor patch <<< "$version"
          fi

          case "${{ steps.pr_info.outputs.title }}" in
            *"[Major]"*) major=$((major + 1)); minor=0; patch=0 ;;
            *"[Minor]"*) minor=$((minor + 1)); patch=0 ;;
            *"[Patch]"*) patch=$((patch + 1)) ;;
            *) minor=$((minor + 1)); patch=0 ;; # default to Minor
          esac

          next_version="v${major}.${minor}.${patch}-beta"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: notes
        run: |
          body="${{ steps.pr_info.outputs.body }}"
          if [ -z "$body" ]; then
            body="No detailed release notes provided."
          fi

          # Format body lines as bullets
          features=$(echo "$body" | sed 's/^/- /')

          # Construct the final message
          release="## This Release Includes:\n$features"

          # Escape characters for GitHub output
          safe_notes=$(echo -e "$release" | sed 's/%/%25/g; s/\r/%0D/g; s/\n/%0A/g')

          echo "release_notes=$safe_notes" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Create GitHub Release
        run: |
          gh release create ${{ steps.get_latest.outputs.next_version }} \
            --title "${{ steps.get_latest.outputs.next_version }}" \
            --notes "${{ steps.notes.outputs.release_notes }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
